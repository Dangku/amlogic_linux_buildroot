diff --git a/src/ServiceContext.cpp b/src/ServiceContext.cpp
index 3c75b3b..36f2004 100644
--- a/src/ServiceContext.cpp
+++ b/src/ServiceContext.cpp
@@ -208,6 +208,30 @@ tt__VideoEncoderConfiguration* StreamProfile::get_video_enc_cfg(struct soap *soa
     return enc_cfg;
 }
 
+tt__AudioSourceConfiguration*  StreamProfile::get_audio_src_cnf(struct soap *soap) const
+{
+    tt__AudioSourceConfiguration* src_cfg = soap_new_tt__AudioSourceConfiguration(soap);
+
+    src_cfg->token       = name;
+    src_cfg->SourceToken = name;
+
+    return src_cfg;
+}
+
+tt__AudioEncoderConfiguration* StreamProfile::get_audio_enc_cfg(struct soap *soap) const
+{
+    tt__AudioEncoderConfiguration* enc_cfg = soap_new_tt__AudioEncoderConfiguration(soap);
+
+    enc_cfg->Name       = name;
+    enc_cfg->token      = name;
+    enc_cfg->Bitrate    = bit_rate;
+    enc_cfg->SampleRate = sample_rate;
+    enc_cfg->Multicast  = soap_new_tt__MulticastConfiguration(soap);
+    enc_cfg->Multicast->Address = soap_new_tt__IPAddress(soap);
+    enc_cfg->Encoding   = static_cast<tt__AudioEncoding>(audio_enc);
+
+    return enc_cfg;
+}
 
 
 tt__Profile* StreamProfile::get_profile(struct soap *soap) const
@@ -219,6 +243,8 @@ tt__Profile* StreamProfile::get_profile(struct soap *soap) const
 
     profile->VideoSourceConfiguration  = get_video_src_cnf(soap);
     profile->VideoEncoderConfiguration = get_video_enc_cfg(soap);
+    profile->AudioSourceConfiguration  = get_audio_src_cnf(soap);
+    profile->AudioEncoderConfiguration = get_audio_enc_cfg(soap);
 
     return profile;
 }
@@ -238,6 +264,18 @@ tt__VideoSource* StreamProfile::get_video_src(soap *soap) const
 
 
 
+tt__AudioSource* StreamProfile::get_audio_src(struct soap *soap) const
+{
+    tt__AudioSource* audio_src = soap_new_tt__AudioSource(soap);
+
+    audio_src->token      = name;
+    audio_src->Channels   = channel;
+
+    return audio_src;
+}
+
+
+
 bool StreamProfile::set_name(const char *new_val)
 {
     if(!new_val)
@@ -326,10 +364,82 @@ bool StreamProfile::set_type(const char *new_val)
         return false;
     }
 
+    return true;
+}
+
+
+bool StreamProfile::set_channel(const char *new_val)
+{
+    std::istringstream ss(new_val);
+    int tmp_val;
+    ss >> tmp_val;
+
+    if( (tmp_val != 1) && (tmp_val != 2) )
+    {
+        str_err = "channel is bad, correct range: 1|2";
+        return false;
+    }
+
+    channel = tmp_val;
+    return true;
+}
+
+bool StreamProfile::set_bit_rate(const char *new_val)
+{
+    std::istringstream ss(new_val);
+    int tmp_val;
+    ss >> tmp_val;
+
+    if( (tmp_val != 32) && (tmp_val != 40)  && (tmp_val != 48) && (tmp_val != 56)
+        && (tmp_val != 64) && (tmp_val != 80)  && (tmp_val != 96) && (tmp_val != 112)
+        && (tmp_val != 128) && (tmp_val != 160)  && (tmp_val != 192) && (tmp_val != 224)
+        && (tmp_val != 256) && (tmp_val != 320))
+    {
+        str_err = "bit_rate is bad, correct range: 32|40|48|56|64|80|96|112|128|160|192|224|256|320 kbps";
+        return false;
+    }
+
+    bit_rate = tmp_val;
+    return true;
+}
+
+bool StreamProfile::set_sample_rate(const char *new_val)
+{
+    std::istringstream ss(new_val);
+    int tmp_val;
+    ss >> tmp_val;
 
+    if( (tmp_val != 8) && (tmp_val != 11) && (tmp_val != 22)
+        && (tmp_val != 32) && (tmp_val != 44) && (tmp_val != 47)
+        && (tmp_val != 48) && (tmp_val != 50) && (tmp_val != 96))
+    {
+        str_err = "sample_rate is bad, correct range: 8|11|22|32|44|47|48|50|96 khz";
+        return false;
+    }
+
+    sample_rate = tmp_val;
     return true;
 }
 
+bool StreamProfile::set_audio_encode  (const char *new_val)
+{
+    std::string new_type(new_val);
+
+
+    if( new_type == "G711" )
+        audio_enc = tt__AudioEncoding__G711;
+    else if( new_type == "G726" )
+        audio_enc = tt__AudioEncoding__G726;
+    else if( new_type == "AAC" )
+        audio_enc = tt__AudioEncoding__AAC;
+    else
+    {
+        str_err = "type dont support";
+        return false;
+    }
+
+    return true;
+}
 
 
 void StreamProfile::clear()
@@ -340,6 +450,11 @@ void StreamProfile::clear()
     width  = -1;
     height = -1;
     type   = -1;
+
+    channel = -1;
+    bit_rate = -1;
+    sample_rate = -1;
+    audio_enc = -1;
 }
 
 
@@ -350,6 +465,10 @@ bool StreamProfile::is_valid() const
              !url.empty()   &&
              (width  != -1) &&
              (height != -1) &&
-             (type   != -1)
+             (type   != -1) &&
+             (channel != -1) &&
+             (bit_rate    != -1) &&
+             (sample_rate != -1) &&
+             (audio_enc != -1)
            );
 }
diff --git a/src/ServiceContext.h b/src/ServiceContext.h
index 927f4b7..1ee87d4 100644
--- a/src/ServiceContext.h
+++ b/src/ServiceContext.h
@@ -24,11 +24,19 @@ class StreamProfile
         int          get_height(void) const { return height; }
         std::string  get_url   (void) const { return url;    }
         int          get_type  (void) const { return type;   }
+        int          get_channel(void) const { return channel; }
+        int          get_bit_rate(void) const { return bit_rate;   }
+        int          get_sample_rate(void) const { return sample_rate;   }
+        int          get_audio_encode  (void) const { return audio_enc;   }
 
 
-
+        tt__VideoSourceConfiguration*  get_video_src_cnf(struct soap *soap) const;
+        tt__VideoEncoderConfiguration* get_video_enc_cfg(struct soap *soap) const;
+        tt__AudioSourceConfiguration*  get_audio_src_cnf(struct soap *soap) const;
+        tt__AudioEncoderConfiguration* get_audio_enc_cfg(struct soap *soap) const;
         tt__Profile*     get_profile(struct soap *soap) const;
         tt__VideoSource* get_video_src(struct soap *soap) const;
+        tt__AudioSource* get_audio_src(struct soap *soap) const;
 
 
 
@@ -38,6 +46,10 @@ class StreamProfile
         bool set_height(const char *new_val);
         bool set_url   (const char *new_val);
         bool set_type  (const char *new_val);
+        bool set_channel(const char *new_val);
+        bool set_bit_rate(const char *new_val);
+        bool set_sample_rate(const char *new_val);
+        bool set_audio_encode  (const char *new_val);
 
 
         std::string get_str_err()  const { return str_err;         }
@@ -55,12 +67,12 @@ class StreamProfile
         std::string  url;
         int          type;
 
+        int          channel;
+        int          bit_rate;
+        int          sample_rate;
+        int          audio_enc;
 
         std::string  str_err;
-
-
-        tt__VideoSourceConfiguration*  get_video_src_cnf(struct soap *soap) const;
-        tt__VideoEncoderConfiguration* get_video_enc_cfg(struct soap *soap) const;
 };
 
 
diff --git a/src/ServiceDevice.cpp b/src/ServiceDevice.cpp
index 29578c2..c71aaa0 100644
--- a/src/ServiceDevice.cpp
+++ b/src/ServiceDevice.cpp
@@ -1,17 +1,21 @@
 /*
  --------------------------------------------------------------------------
  ServiceDevice.cpp
- 
+
  Implementation of functions (methods) for the service:
  ONVIF devicemgmt.wsdl server side
 -----------------------------------------------------------------------------
 */
 
+#include <netinet/in.h>
+#include <arpa/nameser.h>
+#include <resolv.h>
+#include <errno.h>
 
 #include "soapDeviceBindingService.h"
 #include "ServiceContext.h"
 #include "smacros.h"
-
+#include "daemon.h"
 
 
 
@@ -90,6 +94,44 @@ int DeviceBindingService::GetDeviceInformation(_tds__GetDeviceInformation *tds__
 int DeviceBindingService::SetSystemDateAndTime(_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime, _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse)
 {
     DEBUG_MSG("Device: %s\n", __FUNCTION__);
+    struct tm tm;
+    struct timeval systime;
+    int year, month, day, hour, min, sec;
+    int mday[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
+
+    year = tds__SetSystemDateAndTime->UTCDateTime->Date->Year;
+    month = tds__SetSystemDateAndTime->UTCDateTime->Date->Month;
+    day = tds__SetSystemDateAndTime->UTCDateTime->Date->Day;
+    hour = tds__SetSystemDateAndTime->UTCDateTime->Time->Hour;
+    min = tds__SetSystemDateAndTime->UTCDateTime->Time->Minute;
+    sec = tds__SetSystemDateAndTime->UTCDateTime->Time->Second;
+    if( (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
+    {
+        mday[1] = 29;   //In a leap year, there are 29 days in February
+    }
+    if (month<0 || month>12 || day<0 || day>mday[month-1] 
+        || hour<0 || hour>23 || min<0 || min>59 || sec<0 || sec>59)
+    {
+        return SOAP_FAULT;
+    }
+
+    tm.tm_isdst = tds__SetSystemDateAndTime->DaylightSavings ? 1 : 0;
+    tm.tm_zone = tds__SetSystemDateAndTime->TimeZone->TZ.c_str();
+    tm.tm_year = year - 1900;
+    tm.tm_mon = month - 1;
+    tm.tm_mday = day;
+    tm.tm_hour = hour;
+    tm.tm_min = min;
+    tm.tm_sec = sec;
+
+    systime.tv_sec = mktime(&tm);
+    systime.tv_usec = 0;
+    if(settimeofday(&systime, NULL)<0)
+    {
+        DEBUG_MSG("Set system datatime error[%d]\n", errno);
+    }
+
+    DEBUG_MSG("%d-%d-%d %d:%d:%d, %s\n", tm.tm_year, tm.tm_mon+1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec, tm.tm_zone);
     return SOAP_OK;
 }
 
@@ -105,12 +147,14 @@ int DeviceBindingService::GetSystemDateAndTime(_tds__GetSystemDateAndTime *tds__
 
     tds__GetSystemDateAndTimeResponse.SystemDateAndTime                    = soap_new_tt__SystemDateTime(this->soap);
     tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DateTimeType      = tt__SetDateTimeType__Manual;
-    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DaylightSavings   = tm->tm_isdst;
+    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DaylightSavings   = tm->tm_isdst==1 ? true : false;
     tds__GetSystemDateAndTimeResponse.SystemDateAndTime->TimeZone          = soap_new_tt__TimeZone(this->soap);
-    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->TimeZone->TZ      = tm->tm_zone;
+    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->TimeZone->TZ      = tm->tm_zone;						//fetch from config
     tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime       = soap_new_tt__DateTime(this->soap);
     tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Time = soap_new_req_tt__Time(this->soap, tm->tm_hour, tm->tm_min  , tm->tm_sec );
-    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date = soap_new_req_tt__Date(this->soap, tm->tm_year, tm->tm_mon+1, tm->tm_mday);
+    tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date = soap_new_req_tt__Date(this->soap, tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday);
+
+    DEBUG_MSG("%d-%d-%d %d:%d:%d, %s\n", tm->tm_year, tm->tm_mon+1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, tm->tm_zone);
 
     return SOAP_OK;
 }
@@ -136,6 +180,15 @@ int DeviceBindingService::UpgradeSystemFirmware(_tds__UpgradeSystemFirmware *tds
 int DeviceBindingService::SystemReboot(_tds__SystemReboot *tds__SystemReboot, _tds__SystemRebootResponse &tds__SystemRebootResponse)
 {
     DEBUG_MSG("Device: %s\n", __FUNCTION__);
+    tds__SystemRebootResponse.Message = "Rebooting in 30 seconds";//default 30s, need to update the onvif's config
+    switch( fork() )                                     // Become background process
+    {
+        case -1: daemon_error_exit("SystemReboot can't fork: %m\n");
+        case  0: // child process (reboot and exit)
+            sleep(30);
+            system("reboot &");
+        default:  break;  // the parent process (continue)
+    }
     return SOAP_OK;
 }
 
@@ -386,6 +439,14 @@ int DeviceBindingService::SetDPAddresses(_tds__SetDPAddresses *tds__SetDPAddress
 int DeviceBindingService::GetHostname(_tds__GetHostname *tds__GetHostname, _tds__GetHostnameResponse &tds__GetHostnameResponse)
 {
     DEBUG_MSG("Device: %s\n", __FUNCTION__);
+
+    char buffer[HOST_NAME_MAX];
+    tds__GetHostnameResponse.HostnameInformation = soap_new_req_tt__HostnameInformation(this->soap, false);
+    tds__GetHostnameResponse.HostnameInformation->Name = soap_new_std__string(this->soap);
+    if (gethostname(buffer, sizeof(buffer)) == 0)
+    {
+        tds__GetHostnameResponse.HostnameInformation->Name->assign(buffer);
+    }
     return SOAP_OK;
 }
 
@@ -410,6 +471,17 @@ int DeviceBindingService::SetHostnameFromDHCP(_tds__SetHostnameFromDHCP *tds__Se
 int DeviceBindingService::GetDNS(_tds__GetDNS *tds__GetDNS, _tds__GetDNSResponse &tds__GetDNSResponse)
 {
     DEBUG_MSG("Device: %s\n", __FUNCTION__);
+    tds__GetDNSResponse.DNSInformation = soap_new_tt__DNSInformation(soap);
+    struct __res_state state;
+    res_ninit(&state);
+    for (int i=0; i < state.nscount; i++)
+    {
+        tt__IPAddress* address = soap_new_tt__IPAddress(soap);
+        address->Type = tt__IPType__IPv4;
+        address->IPv4Address = soap_new_std__string(soap);
+        address->IPv4Address->assign(inet_ntoa(state.nsaddr_list[i].sin_addr));
+        tds__GetDNSResponse.DNSInformation->DNSManual.push_back(address);
+    }
     return SOAP_OK;
 }
 
@@ -505,6 +577,11 @@ int DeviceBindingService::SetNetworkInterfaces(_tds__SetNetworkInterfaces *tds__
 int DeviceBindingService::GetNetworkProtocols(_tds__GetNetworkProtocols *tds__GetNetworkProtocols, _tds__GetNetworkProtocolsResponse &tds__GetNetworkProtocolsResponse)
 {
     DEBUG_MSG("Device: %s\n", __FUNCTION__);
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+    tds__GetNetworkProtocolsResponse.NetworkProtocols.push_back(soap_new_tt__NetworkProtocol(soap));
+    tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Name = tt__NetworkProtocolType__HTTP;
+    tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Enabled = true;
+    tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Port.push_back(ctx->port);
     return SOAP_OK;
 }
 
diff --git a/src/ServiceMedia.cpp b/src/ServiceMedia.cpp
index b30c02a..9322421 100644
--- a/src/ServiceMedia.cpp
+++ b/src/ServiceMedia.cpp
@@ -54,6 +54,17 @@ int MediaBindingService::GetVideoSources(_trt__GetVideoSources *trt__GetVideoSou
 int MediaBindingService::GetAudioSources(_trt__GetAudioSources *trt__GetAudioSources, _trt__GetAudioSourcesResponse &trt__GetAudioSourcesResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
+
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+
+
+    for( auto it = profiles.cbegin(); it != profiles.cend(); ++it )
+    {
+        trt__GetAudioSourcesResponse.AudioSources.push_back(it->second.get_audio_src(this->soap));
+    }
+
     return SOAP_OK;
 }
 
@@ -92,7 +103,6 @@ int MediaBindingService::GetProfile(_trt__GetProfile *trt__GetProfile, _trt__Get
         ret = SOAP_OK;
     }
 
-
     return ret;
 }
 
@@ -274,6 +284,15 @@ int MediaBindingService::DeleteProfile(_trt__DeleteProfile *trt__DeleteProfile,
 int MediaBindingService::GetVideoSourceConfigurations(_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations, _trt__GetVideoSourceConfigurationsResponse &trt__GetVideoSourceConfigurationsResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+
+
+    for( auto it = profiles.cbegin(); it != profiles.cend(); ++it )
+    {
+        trt__GetVideoSourceConfigurationsResponse.Configurations.push_back(it->second.get_video_src_cnf(this->soap));
+    }
     return SOAP_OK;
 }
 
@@ -282,6 +301,15 @@ int MediaBindingService::GetVideoSourceConfigurations(_trt__GetVideoSourceConfig
 int MediaBindingService::GetVideoEncoderConfigurations(_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations, _trt__GetVideoEncoderConfigurationsResponse &trt__GetVideoEncoderConfigurationsResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+
+
+    for( auto it = profiles.cbegin(); it != profiles.cend(); ++it )
+    {
+        trt__GetVideoEncoderConfigurationsResponse.Configurations.push_back(it->second.get_video_enc_cfg(this->soap));
+    }
     return SOAP_OK;
 }
 
@@ -290,6 +318,15 @@ int MediaBindingService::GetVideoEncoderConfigurations(_trt__GetVideoEncoderConf
 int MediaBindingService::GetAudioSourceConfigurations(_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations, _trt__GetAudioSourceConfigurationsResponse &trt__GetAudioSourceConfigurationsResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+
+
+    for( auto it = profiles.cbegin(); it != profiles.cend(); ++it )
+    {
+        trt__GetAudioSourceConfigurationsResponse.Configurations.push_back(it->second.get_audio_src_cnf(this->soap));
+    }
     return SOAP_OK;
 }
 
@@ -298,6 +335,15 @@ int MediaBindingService::GetAudioSourceConfigurations(_trt__GetAudioSourceConfig
 int MediaBindingService::GetAudioEncoderConfigurations(_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations, _trt__GetAudioEncoderConfigurationsResponse &trt__GetAudioEncoderConfigurationsResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+
+
+    for( auto it = profiles.cbegin(); it != profiles.cend(); ++it )
+    {
+        trt__GetAudioEncoderConfigurationsResponse.Configurations.push_back(it->second.get_audio_enc_cfg(this->soap));
+    }
     return SOAP_OK;
 }
 
@@ -338,7 +384,18 @@ int MediaBindingService::GetAudioDecoderConfigurations(_trt__GetAudioDecoderConf
 int MediaBindingService::GetVideoSourceConfiguration(_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration, _trt__GetVideoSourceConfigurationResponse &trt__GetVideoSourceConfigurationResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
-    return SOAP_OK;
+    int ret = SOAP_FAULT;
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+    auto it = profiles.find(trt__GetVideoSourceConfiguration->ConfigurationToken);
+
+    if( it != profiles.end() )
+    {
+        trt__GetVideoSourceConfigurationResponse.Configuration = it->second.get_video_src_cnf(this->soap);
+        ret = SOAP_OK;
+    }
+    return ret;
 }
 
 
@@ -346,7 +403,18 @@ int MediaBindingService::GetVideoSourceConfiguration(_trt__GetVideoSourceConfigu
 int MediaBindingService::GetVideoEncoderConfiguration(_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration, _trt__GetVideoEncoderConfigurationResponse &trt__GetVideoEncoderConfigurationResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
-    return SOAP_OK;
+    int ret = SOAP_FAULT;
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+    auto it = profiles.find(trt__GetVideoEncoderConfiguration->ConfigurationToken);
+
+    if( it != profiles.end() )
+    {
+        trt__GetVideoEncoderConfigurationResponse.Configuration = it->second.get_video_enc_cfg(this->soap);
+        ret = SOAP_OK;
+    }
+    return ret;
 }
 
 
@@ -354,7 +422,18 @@ int MediaBindingService::GetVideoEncoderConfiguration(_trt__GetVideoEncoderConfi
 int MediaBindingService::GetAudioSourceConfiguration(_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration, _trt__GetAudioSourceConfigurationResponse &trt__GetAudioSourceConfigurationResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
-    return SOAP_OK;
+    int ret = SOAP_FAULT;
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+    auto it = profiles.find(trt__GetAudioSourceConfiguration->ConfigurationToken);
+
+    if( it != profiles.end() )
+    {
+        trt__GetAudioSourceConfigurationResponse.Configuration = it->second.get_audio_src_cnf(this->soap);
+        ret = SOAP_OK;
+    }
+    return ret;
 }
 
 
@@ -362,7 +441,19 @@ int MediaBindingService::GetAudioSourceConfiguration(_trt__GetAudioSourceConfigu
 int MediaBindingService::GetAudioEncoderConfiguration(_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration, _trt__GetAudioEncoderConfigurationResponse &trt__GetAudioEncoderConfigurationResponse)
 {
     DEBUG_MSG("Media: %s\n", __FUNCTION__);
-    return SOAP_OK;
+    int ret = SOAP_FAULT;
+    ServiceContext* ctx = (ServiceContext*)this->soap->user;
+
+    auto profiles = ctx->get_profiles();
+    auto it = profiles.find(trt__GetAudioEncoderConfiguration->ConfigurationToken);
+
+    if( it != profiles.end() )
+    {
+        trt__GetAudioEncoderConfigurationResponse.Configuration = it->second.get_audio_enc_cfg(this->soap);
+        ret = SOAP_OK;
+    }
+
+    return ret;
 }
 
 
diff --git a/src/onvif_srvd.c b/src/onvif_srvd.c
index cb4cfb4..71e6535 100644
--- a/src/onvif_srvd.c
+++ b/src/onvif_srvd.c
@@ -15,6 +15,7 @@
 #include "DeviceBinding.nsmap"
 #include "soapDeviceBindingService.h"
 #include "soapMediaBindingService.h"
+#include "wsseapi.h"
 
 
 
@@ -53,7 +54,13 @@ static const char *help_str =
         "       --url          [value] Set URL (or template URL) for Profile Media Services\n"
         "                              in template mode %s will be changed to IP of interfase (see opt ifs)\n"
         "       --type         [value] Set Type for Profile Media Services (JPEG|MPEG4|H264)\n"
-        "                              It is also a sign of the end of the profile parameters\n\n"
+        "       --channel      [value] Set Audio channels for Profile Media Services (1|2) mono or stereo\n"
+        "       --bit_rate     [value] Set Audio bit rate for Profile Media Services \n"
+        "                                (32|40|48|56|64|80|96|112|128|160|192|224|256|320) kbps\n"
+        "       --sample_rate  [value] Set Audio sample rate for Profile Media Services \n"
+        "                                (8|11|22|32|44|47|48|50|96) khz\n"
+        "        --audio_enc   [value] Set Audio encode for Profile Media Services (G711|G726|AAC)\n"
+        "                                It is also a sign of the end of the profile parameters\n\n"
         "  -v,  --version              Display daemon version\n"
         "  -h,  --help                 Display this help\n\n";
 
@@ -92,7 +99,11 @@ namespace LongOpts
         width,
         height,
         url,
-        type
+        type,
+        channel,
+        bit_rate,
+        sample_rate,
+        audio_enc
     };
 }
 
@@ -131,6 +142,10 @@ static const struct option long_opts[] =
     { "height",        required_argument, NULL, LongOpts::height       },
     { "url",           required_argument, NULL, LongOpts::url          },
     { "type",          required_argument, NULL, LongOpts::type         },
+    { "channel",       required_argument, NULL, LongOpts::channel      },
+    { "bit_rate",      required_argument, NULL, LongOpts::bit_rate     },
+    { "sample_rate",   required_argument, NULL, LongOpts::sample_rate  },
+    { "audio_enc",     required_argument, NULL, LongOpts::audio_enc    },
 
     { NULL,           no_argument,       NULL,  0                      }
 };
@@ -170,7 +185,7 @@ static const struct option long_opts[] =
 #define DECLARE_SERVICE(service, soap) service service ## _inst(soap);
 
 #define DISPATCH_SERVICE(service, soap)                                  \
-                else if (service ## _inst.dispatch() != SOAP_NO_METHOD) {\
+                else if (verify_user() != SOAP_OK || service ## _inst.dispatch() != SOAP_NO_METHOD) {\
                     soap_send_fault(soap);                               \
                     soap_stream_fault(soap, std::cerr);                  \
                 }
@@ -346,6 +361,30 @@ void processing_cmd(int argc, char *argv[])
                         if( !profile.set_type(optarg) )
                             daemon_error_exit("Can't set type for Profile: %s\n", profile.get_cstr_err());
 
+                        break;
+
+            case LongOpts::channel:
+                        if( !profile.set_channel(optarg) )
+                            daemon_error_exit("Can't set channel for Profile: %s\n", profile.get_cstr_err());
+
+                        break;
+
+            case LongOpts::bit_rate:
+                        if( !profile.set_bit_rate(optarg) )
+                            daemon_error_exit("Can't set bit_rate for Profile: %s\n", profile.get_cstr_err());
+
+                        break;
+
+            case LongOpts::sample_rate:
+                        if( !profile.set_sample_rate(optarg) )
+                            daemon_error_exit("Can't set sample_rate for Profile: %s\n", profile.get_cstr_err());
+
+                        break;
+
+            case LongOpts::audio_enc:
+                        if( !profile.set_audio_encode(optarg) )
+                            daemon_error_exit("Can't set audio_enc for Profile: %s\n", profile.get_cstr_err());
+
                         if( !service_ctx.add_profile(profile) )
                             daemon_error_exit("Can't add Profile: %s\n", service_ctx.get_cstr_err());
 
@@ -414,6 +453,39 @@ void init(void *data)
 }
 
 
+int verify_user()
+{
+   DEBUG_MSG("verify_user\n");
+  if (soap == NULL || soap_wsse_Security(soap) == NULL)
+  {
+    return SOAP_OK;
+  }
+  DEBUG_MSG("verify_user start\n");
+  ServiceContext* ctx = (ServiceContext*)soap->user;
+  DEBUG_MSG("verify_user user=%s\n", ctx->user.c_str());
+  if (!ctx->user.empty())
+  {
+    // check authentification
+    const char *username = soap_wsse_get_Username(soap);
+    if (!username) {
+      soap_wsse_delete_Security(soap);
+      return soap->error;
+    }
+    if (ctx->user != username) {
+      soap_wsse_delete_Security(soap);
+      return SOAP_FAULT;
+    }
+    DEBUG_MSG("verify_user password=%s\n", ctx->password.c_str());
+    if (soap_wsse_verify_Password(soap, ctx->password.c_str())) {
+      soap_wsse_delete_Security(soap);
+      return soap->error;
+    }
+  }
+  DEBUG_MSG("verify_user end\n");
+  soap_wsse_delete_Security(soap);
+  return SOAP_OK;
+}
+
 
 int main(int argc, char *argv[])
 {
diff --git a/start_scripts/S90onvif_srvd b/start_scripts/S90onvif_srvd
index 7c19871..28c0541 100644
--- a/start_scripts/S90onvif_srvd
+++ b/start_scripts/S90onvif_srvd
@@ -15,7 +15,7 @@ DAEMON_ARGS="$DAEMON_ARGS --scope onvif://www.onvif.org/location/Unknow"
 DAEMON_ARGS="$DAEMON_ARGS --scope onvif://www.onvif.org/Profile/Streaming"
 DAEMON_ARGS="$DAEMON_ARGS --scope onvif://www.onvif.org/Profile/S"
 DAEMON_ARGS="$DAEMON_ARGS --name RTSP --width 800 --height 600 --url rtsp://%s:554/live.sdp --type H264"
-
+DAEMON_ARGS="$DAEMON_ARGS --channel 1 --bit_rate 64 --sample_rate 8 --audio_enc G711"
 
 
 d_start()
