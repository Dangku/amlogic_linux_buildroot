diff --git a/include/server.h b/include/server.h
index 78ea5d7..a2946e1 100644
--- a/include/server.h
+++ b/include/server.h
@@ -27,9 +27,11 @@
 #define DEFAULT_FRAMERATE "25"
 #define DEFAULT_WIDTH "1280"
 #define DEFAULT_HEIGHT "720"
+#define DEFAULT_BITRATE "2000"
 #define DEFAULT_TIME_ENABLED false
 #define DEFAULT_DIGEST_ENABLED false
 #define DEFAULT_GST_PIPELINE ""
+#define DEFAULT_FACE_DETECTION_ENABLED false
 
 enum InputType { UNDEFINED_INPUT, FILE_INPUT, RTSP_INPUT, VIDEOTESTSRC_INPUT, DEVICE_INPUT };
 
@@ -48,6 +50,8 @@ typedef struct s_config {
   // Encoding
   std::string framerate;
   std::pair<std::string, std::string> scale;
+  std::string bitrate;
+  std::string encoder_extra_properties;
 
   // Options
   bool time;
@@ -55,6 +59,7 @@ typedef struct s_config {
 
   // Custom gstreamer pipeline
   std::string pipeline;
+  bool face_detection;
 } t_config;
 
 typedef struct s_server {
diff --git a/src/parsing.cpp b/src/parsing.cpp
index bb5ff69..5d34db8 100644
--- a/src/parsing.cpp
+++ b/src/parsing.cpp
@@ -72,6 +72,16 @@ void parse_env(std::shared_ptr<t_config> &config) {
     }
   }
 
+  config->bitrate = DEFAULT_BITRATE;
+  if (const char *bitrate = std::getenv("RTSP_BITRATE")) {
+    config->bitrate = bitrate;
+  }
+
+  config->encoder_extra_properties = "";
+  if (const char *extra_properties = std::getenv("RTSP_ENC_EXTRA")) {
+    config->encoder_extra_properties = extra_properties;
+  }
+
   // Input
   config->input = DEFAULT_INPUT;
   if (const char *input = std::getenv("INPUT")) {
@@ -103,13 +113,23 @@ void parse_env(std::shared_ptr<t_config> &config) {
   if (const char *pipeline = std::getenv("GST_PIPELINE")) {
     config->pipeline = pipeline;
   }
+
+  // Face Detection
+  config->face_detection = DEFAULT_FACE_DETECTION_ENABLED;
+  if ( const char *face_detect = std::getenv("RTSP_ENABLE_FACE_DETECTION")) {
+    if (strcmp(face_detect, "false") == 0) {
+      config->face_detection = false;
+    } else {
+      config->face_detection = true;
+    }
+  }
 }
 
 // Overwrite default parameters via cmd line
 bool parse_args(std::shared_ptr<t_config> &config, int argc, char **argv) {
   int c;
   opterr = 0;
-  while ((c = getopt(argc, argv, "r:u:l:p:b:f:s:i:g:ht")) != -1) {
+  while ((c = getopt(argc, argv, "r:u:l:p:b:f:s:i:g:e:x:htda")) != -1) {
     switch (c) {
     case 'r': // Route
       if (optarg && optarg[0] == '-') {
@@ -173,6 +193,19 @@ bool parse_args(std::shared_ptr<t_config> &config, int argc, char **argv) {
       config->scale.second = scale.substr(pos + 1);
       break;
     }
+    case 'e': { // Bitrate
+      if (optarg && optarg[0] == '-') {
+        break;
+      }
+      config->bitrate = optarg;
+      break;
+    }
+    case 'x': { // Extra properties of encoder
+      if (optarg && optarg[0] == '-') {
+        break;
+      }
+      config->encoder_extra_properties = optarg;
+    }
     case 't': // Time Overlay
       config->time = true;
       break;
@@ -185,17 +218,20 @@ bool parse_args(std::shared_ptr<t_config> &config, int argc, char **argv) {
       }
       config->pipeline = optarg;
       break;
+    case 'a': // Face Detection
+      config->face_detection = true;
+      break;
     case 'h': // help
       fprintf(stdout,
               "Usage: %s [-l address] [-b port] [-r route] [-i "
               "input] [-u username] [-p password] [-f framerate] [-s "
-              "'width'x'height'] [-d] [-t] [-h] [-g gst-pipeline]\n",
+              "'width'x'height'] [-e bitrate] [-x extra properties for encoder] [-d] [-t] [-h] [-g gst-pipeline]\n",
               argv[0]);
       return true;
     case '?':
       if (optopt == 'r' || optopt == 'l' || optopt == 'p' || optopt == 'u' ||
           optopt == 'i' || optopt == 'a' || optopt == 'b' || optopt == 'f' ||
-          optopt == 's' || optopt == 'g') {
+          optopt == 's' || optopt == 'g' || optopt == 'e' || optopt == 'x') {
         fprintf(stderr, "Option -%c requires an argument.\n", optopt);
       } else if (isprint(optopt)) {
         fprintf(stderr, "Unknown option `-%c'.\n", optopt);
diff --git a/src/pipeline.cpp b/src/pipeline.cpp
index f8636aa..8f84c9f 100644
--- a/src/pipeline.cpp
+++ b/src/pipeline.cpp
@@ -46,11 +46,20 @@ std::string encode(std::shared_ptr<t_config> &config) {
   launchCmd += config->scale.first;
   launchCmd += ",height=";
   launchCmd += config->scale.second;
+  // If face detection enabled, add it to the pipeline
+  if (config->face_detection) {
+    launchCmd += " ! queue ! amlyoloface";
+  }
   launchCmd += " ! videorate ! video/x-raw,framerate=";
   launchCmd += config->framerate;
   launchCmd += "/1";
-  launchCmd += " ! capsfilter ! queue"
-               " ! x264enc speed-preset=superfast";
+  launchCmd += " ! amlx264enc";
+  launchCmd += " framerate=";
+  launchCmd += config->framerate;
+  launchCmd += " bitrate=";
+  launchCmd += config->bitrate;
+  launchCmd += " ";
+  launchCmd += config->encoder_extra_properties;
 
   return launchCmd;
 }
@@ -105,7 +114,7 @@ std::string create_file_input(std::shared_ptr<t_config> &config) {
 
 // Device input pipeline
 std::string create_device_input(std::shared_ptr<t_config> &config) {
-  std::string launchCmd = ""; 
+  std::string launchCmd = "";
 
   launchCmd += " v4l2src device=";
   launchCmd += config->input;
diff --git a/src/server.cpp b/src/server.cpp
index a4f82d3..74eaea9 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -65,8 +65,10 @@ bool server_init(t_server *serv) {
                            serv->config->username.c_str(), NULL);
 
   if (serv->config->digest) {
-    gst_rtsp_auth_set_supported_methods(serv->auth, GST_RTSP_AUTH_DIGEST);
-    gst_rtsp_auth_add_digest(serv->auth, serv->config->username.c_str(), serv->config->password.c_str(), serv->token);
+    //gst_rtsp_auth_set_supported_methods(serv->auth, GST_RTSP_AUTH_DIGEST);
+    //gst_rtsp_auth_add_digest(serv->auth, serv->config->username.c_str(), serv->config->password.c_str(), serv->token);
+    g_print("digest is not supported in this version\n");
+    return false;
   } else {
     serv->basic = gst_rtsp_auth_make_basic(serv->config->username.c_str(),
                                            serv->config->password.c_str());
