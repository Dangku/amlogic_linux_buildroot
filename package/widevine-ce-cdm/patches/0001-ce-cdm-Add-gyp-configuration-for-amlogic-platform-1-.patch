From 8c399c6d2ddd8f06731d3ff017d9afb443025290 Mon Sep 17 00:00:00 2001
From: Daogao Xu <daogao.xu@amlogic.com>
Date: Mon, 12 Nov 2018 17:21:13 +0800
Subject: [PATCH] ce-cdm: Add gyp configuration for amlogic platform [1/1]

PD#SWPL-1586

Problem:
widevine ce cdm library

Solution:
Add gyp configuration for amlogic platform

Verify:
local
---
 cdm/cdm.gyp                      |   1 +
 cdm/include/cdm.h                |  19 +++++
 cdm/src/cdm_symbols.cpp          |  18 +++++
 platforms/amlogic/environment.py |  11 +++
 platforms/amlogic/settings.gypi  | 155 +++++++++++++++++++++++++++++++++++++++
 5 files changed, 204 insertions(+)
 create mode 100644 cdm/src/cdm_symbols.cpp
 create mode 100644 platforms/amlogic/environment.py
 create mode 100644 platforms/amlogic/settings.gypi

diff --git a/cdm/cdm.gyp b/cdm/cdm.gyp
index 0ddd7bb..4e6b021 100644
--- a/cdm/cdm.gyp
+++ b/cdm/cdm.gyp
@@ -179,6 +179,7 @@
         'src/lock.cpp',
         'src/log.cpp',
         'src/properties_ce.cpp',
+        'src/cdm_symbols.cpp',
       ],
     },  # widevine_cdm_static target
     {
diff --git a/cdm/include/cdm.h b/cdm/include/cdm.h
index f14690e..c89d6d3 100644
--- a/cdm/include/cdm.h
+++ b/cdm/include/cdm.h
@@ -720,4 +720,23 @@ class CDM_EXPORT Cdm : public ITimerClient {
 
 }  // namespace widevine
 
+// Widevine use boring ssl which shares most of it's symbol with Cobalt's openssl
+// To solve this name conflics, widevine has to be loaded by dlopen with RTLD_LOCAL flag
+// the symbols in widevine::Cdm and others will be unavailable because of RTLD_LOCAL,
+// Here We will get these function pointers explicitly from a export funcion cobalt_widevine_cdm_init
+struct CobaltWidevineSymbols {
+  void (*InitLogging)();
+  const char *(*version)();
+  widevine::Cdm::Status (*initialize)(
+      widevine::Cdm::SecureOutputType secure_output_type,
+      const widevine::Cdm::ClientInfo &client_info,
+      widevine::Cdm::IStorage *storage, widevine::Cdm::IClock *clock,
+      widevine::Cdm::ITimer *timer, widevine::Cdm::LogLevel verbosity);
+  widevine::Cdm *(*create)(widevine::Cdm::IEventListener *listener,
+                           widevine::Cdm::IStorage *storage, bool privacy_mode);
+  void *CopyBuffer; // OEMCrypto_CopyBuffer
+};
+
+extern "C" int cobalt_widevine_cdm_init(struct CobaltWidevineSymbols * symbols);
+
 #endif  // WVCDM_CDM_CDM_H_
diff --git a/cdm/src/cdm_symbols.cpp b/cdm/src/cdm_symbols.cpp
new file mode 100644
index 0000000..afdaf89
--- /dev/null
+++ b/cdm/src/cdm_symbols.cpp
@@ -0,0 +1,18 @@
+
+#include "cdm.h"
+#include "log.h"
+#include "string_conversions.h"
+#include "OEMCryptoCENC.h"
+
+extern "C" {
+__attribute__((visibility("default"))) 
+int cobalt_widevine_cdm_init(struct CobaltWidevineSymbols * symbols) {
+    symbols->InitLogging = &::wvcdm::InitLogging;
+    symbols->version = &::widevine::Cdm::version;
+    symbols->initialize = &::widevine::Cdm::initialize;
+    symbols->create = &::widevine::Cdm::create;
+    symbols->CopyBuffer = (void*)&::OEMCrypto_CopyBuffer;
+    return 0;
+};
+}
+
diff --git a/platforms/amlogic/environment.py b/platforms/amlogic/environment.py
new file mode 100644
index 0000000..63c8e41
--- /dev/null
+++ b/platforms/amlogic/environment.py
@@ -0,0 +1,11 @@
+import os
+export_variables = {
+  'CC_host': 'gcc',
+  'CXX_host': 'g++',
+  'AR_host': 'ar',
+  'CC_target': os.environ['WV_CE_CDM_CROSS']+'gcc',
+  'CXX_target': os.environ['WV_CE_CDM_CROSS']+'g++',
+  'AR_target': os.environ['WV_CE_CDM_CROSS']+'ar',
+  'GYP_CROSSCOMPILE': '1',
+  'CLANG_BUILD': '0',
+}
diff --git a/platforms/amlogic/settings.gypi b/platforms/amlogic/settings.gypi
new file mode 100644
index 0000000..358a264
--- /dev/null
+++ b/platforms/amlogic/settings.gypi
@@ -0,0 +1,155 @@
+# Copyright 2018 Google LLC. All Rights Reserved. This file and proprietary
+# source code may only be used and distributed under the Widevine Master
+# License Agreement.
+{
+  # Here you can override global gyp variables with platform-specific values.
+  # See cdm.gyp for a complete list of settings you can override.
+  'variables': {
+    'asm_target_arch': 'none',
+  }, # end variables
+
+  # Here you can set platform-specific compiler settings.
+  'target_defaults': {
+    # These are flags passed to the compiler for all C & C++ files.
+    'cflags': [
+      '-fPIC',
+    ],
+
+    # These are flags passed to the compiler for plain C only.
+    'cflags_c': [
+      '-Wbad-function-cast',
+    ],
+    # These are flags passed to the compiler for C++ only.
+    'cflags_cc': [
+      # Compile using the gnu'98 standard.
+      # C++ standards are not used becuase of use of va_copy in
+      # third_party/protobuf (When using std++03 it defines
+      # __STRICT_ANSI__, which will make clang headers not define
+      # va_copy.). C++11 is not used because some partner
+      # toolchains do not yet support it.
+      '-std=gnu++98',
+      '-fno-rtti',
+      '-fno-exceptions',
+      # Enable all warnings, and treat warnings as errors.
+      '-Wall',
+      #'-Werror',
+      '-Wextra',
+      '-Wunused',
+      '-Wcast-qual',
+      '-Wno-long-long',
+      '-Wno-variadic-macros',
+      '-Wno-inline',
+      '-Wformat=2',
+      '-Wno-format-nonliteral',
+      '-Wshadow',
+      '-Wnon-virtual-dtor',
+      #'-Woverloaded-virtual',
+      #'-Wctor-dtor-privacy',
+      '-Wcast-align',
+      '-Wno-conversion',
+      '-Wignored-qualifiers',
+      '-Wreturn-type',
+      #'-Wstrict-null-sentinel',
+      #'-Wuseless-cast',
+      '-Wno-unused-parameter',   # repeated in protobufs triggers this
+      '-Wno-unused-local-typedefs',  # metrics requires this
+      #'-Wno-inconsistent-missing-override',
+      #'-Wno-maybe-uninitialized',
+      #'-Wno-unknown-warning-option',
+      # Fallthrough annotations are not supported on C++98, but GCC 7+ still
+      # errors on them by default.
+      #'-Wno-implicit-fallthrough',
+      #'-Wno-dangling-else',  # Allowed by Google C++ Style
+    ],
+
+    # These are flags passed to the linker.
+    'ldflags': [
+    ],
+
+    # These are macros set by the compiler.
+    'defines': [
+      # suppress use of override keyword.
+      'DISABLE_OVERRIDE_KEYWORD',
+      #'EXAMPLE_MACRO_WITH_NO_VALUE',
+      #'EXAMPLE_KEY=EXAMPLE_VALUE',
+    ],
+
+    # These are additional include paths to search for headers.
+    'include_dirs': [
+      #'/usr/local/include',
+    ],
+
+    'target_conditions': [
+      ['_toolset == "host"', {
+        # These are settings specifically for the host toolchain.
+        # The extra equals sign in the key name instructs gyp to replace
+        # the generic settings above rather than append to them.
+        'cflags=': [
+        ],
+
+        'cflags_c=': [
+        ],
+
+        'cflags_cc=': [
+          '-Wcast-qual',
+          # '-Wextra',
+          '-Wno-unused',
+          '-Wno-long-long',
+          '-Wno-variadic-macros',
+          '-Wno-inline',
+          '-Wformat=2',
+          '-Wno-format-nonliteral',
+          '-Wnon-virtual-dtor',
+          #'-Woverloaded-virtual',
+          #'-Wctor-dtor-privacy',
+          '-Wcast-align',
+          '-Wno-ignored-qualifiers',
+          '-Wno-return-type',
+        ],
+
+        'ldflags=': [
+        ],
+
+        'defines=': [
+        ],
+
+        'include_dirs=': [
+        ],
+      }, {
+        'cflags=': [
+            ' <!(echo $WV_CE_CDM_CFLAGS)',
+        ],
+      }], # end _toolset == "host" condition
+    ], # end target_conditions
+
+    'configurations': {
+      # These are additional settings per build configuration.
+      # You may specify any of the keys above in this section
+      # (cflags, cflags_c, cflags_cc, ldflags, defines, include_dirs).
+      'Debug': {
+        'cflags': [
+          '-O0',
+          '-g',
+        ],
+        'defines': [
+          '_DEBUG',
+        ],
+        'ldflags': [
+          '-g',
+        ],
+      },
+      'Release': {
+        'cflags': [
+          '-O2',
+          '-g0',
+        ],
+        'ldflags': [
+          '-flto',
+        ],
+        'defines': [
+          'NDEBUG',
+        ],
+      },
+    }, # end configurations
+  }, # end target_defaults
+}
-- 
2.7.4

