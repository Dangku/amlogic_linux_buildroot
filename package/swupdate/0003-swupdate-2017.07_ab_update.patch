--- swupdate-2017.07/core/cpio_utils.c	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/core/cpio_utils.c	2017-11-28 19:53:00.310256100 +0800
@@ -30,7 +30,7 @@
 
 #define MODULE_NAME "cpio"
 
-#define BUFF_SIZE	 16384
+#define BUFF_SIZE	 262144
 
 #define NPAD_BYTES(o) ((4 - (o % 4)) % 4)
 
--- swupdate-2017.07/core/swupdate.c	2017-11-28 19:57:13.976898200 +0800
+++ swupdate-2017.07/core/swupdate.c	2017-11-28 19:53:00.322256400 +0800
@@ -352,6 +352,9 @@
 	 * Set "recovery_status" as begin of the transaction"
 	 */
 	bootloader_env_set("recovery_status", "in_progress");
+#ifdef HAVE_RECOVERY
+	set_recovery();
+#endif
 
 	ret = install_images(&swcfg, fdsw, 1);
 
@@ -545,7 +548,10 @@
 
 	/* Initialize internal database */
 	swupdate_init(&swcfg);
-
+    	mtd_scan_partitions();
+#ifdef HAVE_RECOVERY
+	clear_recovery();
+#endif
 	/*
 	 * Initialize notifier to enable at least output
 	 * on the console
@@ -835,6 +841,15 @@
 		if (postupdate(&swcfg, NULL) != 0) {
 			ERROR("Post-update command execution failed.");
 		}
+
+		if (get_system_type() == 0) {
+			int slot = 0;
+			get_active_slot(&slot);
+			slot = slot ? 0 : 1;
+			set_active_slot(slot);
+		} else {
+			clear_recovery();
+		}
 	}
 
 	/*
--- swupdate-2017.07/corelib/stream_interface.c	2017-11-28 19:57:13.980898300 +0800
+++ swupdate-2017.07/corelib/stream_interface.c	2017-11-28 19:53:00.310256100 +0800
@@ -371,9 +371,9 @@
 			if (ret == 0) {
 				close(inst.fd);
 				inst.last_install = SUCCESS;
-				bootloader_env_set("upgrade_step", "3");
 				notify(SUCCESS, RECOVERY_NO_ERROR, "SWUPDATE download successful !, reboot...");
 				umount("/data");
+				set_recovery();
 				system("reboot");
 				sleep(5);
 			} else {
--- swupdate-2017.07/handlers/ext4_handler.c	2017-11-28 19:57:13.988898500 +0800
+++ swupdate-2017.07/handlers/ext4_handler.c	2017-11-28 19:53:00.314256200 +0800
@@ -599,6 +599,8 @@
 {
     int ret;
     int fdout;
+    int slot = 0;
+    char device_name[128];
 
     ret = hash_check(img->fdin, img->size, img->sha256);
     if (ret != 0) {
@@ -607,9 +609,24 @@
 
     fdout = open(img->device, O_RDWR);
     if (fdout < 0) {
+        //try a/b  system
+        ret = get_active_slot(&slot);
+        if (ret != 0) {
+            TRACE("get active slot failed!\n");
+            return -1;
+        }
+
+        if (slot == 0) {
+            sprintf(device_name, "%s%s", img->device, "_b");
+        } else {
+            sprintf(device_name, "%s%s", img->device, "_a");
+        }
+        fdout = open(device_name, O_RDWR);
+        if (fdout < 0) {
         TRACE("Device %s cannot be opened: %s", img->device, strerror(errno));
         return -1;
     }
+    }
 
     ret = flash_write_ext4(img->fdin, img->size, fdout);
 
--- swupdate-2017.07/handlers/flash_handler.c	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/handlers/flash_handler.c	2017-11-28 19:53:00.314256200 +0800
@@ -306,6 +306,45 @@
 		return flash_write_nand(mtdnum, img);
 }
 
+static int flash_write_boot(struct img_type *img) {
+    int ret = 0;
+    int slot = 0;
+    int mtd_bootab = 0;
+
+    ret = get_active_slot(&slot);
+    if (ret != 0) {
+        ERROR("get active slot failed!\n");
+        return -1;
+    }
+
+    //get boot_a/b mtdnum
+    if (slot == 0) {
+        ret = get_mtd_by_name("boot_b");
+    } else {
+        ret = get_mtd_by_name("boot_a");
+    }
+
+    if (ret < 0) {
+        ERROR("get boot_a/b mtdnum failed!\n");
+        return -1;
+    }
+    mtd_bootab = ret;
+ 
+    //write boot_a/b partition
+    if(flash_erase(mtd_bootab)) {
+        ERROR("I cannot erasing /dev/mtd%d",mtd_bootab);
+        return -1;
+    }
+
+    TRACE("Copying %s into /dev/mtd%d", img->fname, mtd_bootab);
+    if (flash_write_image(mtd_bootab, img)) {
+        ERROR("I cannot copy %s into /dev/mtd%d", img->fname, mtd_bootab);
+        return -1;
+    }
+
+    return 0;
+}
+
 static int install_flash_image(struct img_type *img,
 	void __attribute__ ((__unused__)) *data)
 {
@@ -313,6 +352,11 @@
 	int mtdnum;
 	int n;
 
+	//if a/b boot, need to write boot_a or boot_b
+	if ((strcmp(img->fname, "boot.img")==0) && (get_system_type()==0)) {
+		return flash_write_boot(img);
+	}
+
 	n = snprintf(filename, sizeof(filename), "%s%s", TMPDIR, img->fname);
 	if (n < 0 || n >= sizeof(filename)) {
 		ERROR("Filename too long: %s", img->fname);
--- swupdate-2017.07/handlers/raw_handler.c	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/handlers/raw_handler.c	2017-11-28 19:53:00.314256200 +0800
@@ -33,19 +33,77 @@
 void raw_handler(void);
 void raw_filecopy_handler(void);
 
+static int install_boot_ab(struct img_type *img) {
+    int ret = 0;
+    int slot = 0;
+    int fdout = 0;
+    char devicename[128] = {0};
+
+    ret = get_active_slot(&slot);
+    if (ret != 0) {
+        TRACE("get active slot failed!\n");
+        return -1;
+    }
+
+    ret = get_inactive_devicename("boot", slot, devicename);
+    if (ret != 0) {
+        TRACE("get inactive devicename failed!\n");
+        return -1;
+    }
+
+    //write boot_a/b
+    printf("write boot.img to %s.\n", devicename);
+    fdout = open(devicename, O_RDWR);
+    if (fdout < 0) {
+        TRACE("open %s failed!\n", devicename);
+        return -1;
+    }
+
+    ret = copyimage(&fdout, img, NULL);
+    close(fdout);
+    if (ret != 0) {
+        TRACE("install %s failed!\n", devicename);
+        return -1;
+    }
+
+    return ret;
+}
+
 static int install_raw_image(struct img_type *img,
 	void __attribute__ ((__unused__)) *data)
 {
 	int ret;
 	int fdout;
+	int slot = 0;
+	char device_name[128];
+
+	//if a/b system and write boot partition
+	if ((strcmp(img->fname, "boot.img")==0) && (get_system_type()==0)) {
+		return install_boot_ab(img);
+	}
 
 	fdout = open(img->device, O_RDWR);
 	if (fdout < 0) {
-		TRACE("Device %s cannot be opened: %s",
-				img->device, strerror(errno));
+		//try a/b  system
+		ret = get_active_slot(&slot);
+		if (ret != 0) {
+			TRACE("get active slot failed!\n");
 		return -1;
 	}
 	
+		if (slot == 0) {
+			sprintf(device_name, "%s%s", img->device, "_b");
+		} else {
+			sprintf(device_name, "%s%s", img->device, "_a");
+		}
+
+		fdout = open(device_name, O_RDWR);
+		if (fdout < 0) {
+			TRACE("Device %s cannot be opened: %s", img->device, strerror(errno));
+			return -1;
+		}
+	}
+	
 	ret = copyimage(&fdout, img, NULL);
 
 	close(fdout);
--- swupdate-2017.07/handlers/ubivol_handler.c	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/handlers/ubivol_handler.c	2017-11-28 19:53:00.314256200 +0800
@@ -122,13 +122,19 @@
 	int i, ret;
 
 	/* Get the correct information */
+	int flag = 0;
 	for (i = mtd->lowest_mtd_num; i <= mtd->highest_mtd_num; i++) {
 		mtd_info = &flash->mtd_info[i];
 
 		ubivol = search_volume(img->volname,
 			&mtd_info->ubi_partitions);
-		if (ubivol)
+		if (ubivol) {
+			if ((get_ubi_skip()==1) && (flag == 0)) {
+				flag = 1;
+				continue;
+			}
 			break;
+		}
 	}
 	if (!ubivol) {
 		ERROR("Image %s should be stored in volume "
@@ -159,8 +165,13 @@
 	 * Partition are adjusted only in one MTD device
 	 * Other MTD are not touched
 	 */
-	mtdnum = get_mtd_from_device(cfg->device);
-	if (mtdnum < 0 || !mtd_dev_present(flash->libmtd, mtdnum)) {
+	if (get_system_type() == 0) {
+             mtdnum = get_inactive_mtd("system");
+	} else {
+		mtdnum = get_mtd_from_device(cfg->device);
+	}
+
+      if (mtdnum < 0 || !mtd_dev_present(flash->libmtd, mtdnum)) {
 		ERROR("%s does not exist: partitioning not possible",
 			cfg->device);
 		return -ENODEV;
