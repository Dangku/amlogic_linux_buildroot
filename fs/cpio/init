#!/bin/sh
#Mount things needed by this script
/bin/mount -t proc proc /proc
/bin/mount -t sysfs sysfs /sys
/bin/mount -t devtmpfs devtmpfs /dev

#Create device nodes
mdev -s

#insert our precious NFTL
modprobe aml_nftl_dev

#Function for parsing command line options with "=" in them
# get_opt("init=/sbin/init") will return "/sbin/init"
get_opt() {
    echo "$@" | cut -d "=" -f 2
}

#Defaults
init="/init2"
root="/dev/cardblksd1"
firmware=""

#Process command line options
for i in $(cat /proc/cmdline); do
    case $i in
        root\=*)
            root=$(get_opt $i)
            ;;
        firmware\=*)
            firmware=$(get_opt $i)
            ;;
    esac
done

#Mount the root device
mount "${root}" /mnt

if [ -n "${firmware}" ]; then
    if [ -f "/mnt/${firmware}" ] ; then
        echo "formating file system"
        mkfs.ext4 /dev/system
        mkdir -p system
        mount -t ext4 /dev/system /system
        echo "extracting file system ..."
        gunzip -c /mnt/rootfs.tar.gz  | tar -xf - -C /system
        if [ $? -ne 0 ]; then
           echo "Error: untar failed."
        else
           echo "Done"
        fi
        if [ -f "/mnt/boot.img" ]; then
           echo "Writing boot.img into boot partition(mtdblock3)..."
           dd if=/mnt/boot.img of=/dev/mtdblock3
           echo "Done"
        fi
        sync
        echo "update complete"
        umount /sys /proc /dev
        exec chroot /system "/init2"
    else
        echo "cannot locate ${firmware}"
        echo "boot normally..."
    fi
fi
#Check if $init exists and is executable
if [[ -x "/mnt/${init}" ]] ; then
    #Unmount all other mounts so that the ram used by
    #the initramfs can be cleared after switch_root
    umount /sys /proc /dev

    #Switch to the new root and execute init
    exec chroot /mnt "${init}"
fi

#This will only be run if the exec above failed
echo "Failed to switch root, dropping to a shell"
exec sh
